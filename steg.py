# -*- coding: utf-8 -*-
"""steg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rUp25QgHxA7_kCreHK9moiD0jfCyMOM8

# **Import data and package**
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install matplotlib

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
import numpy as np
from numpy import random
from PIL import Image
from sklearn import utils
# %matplotlib inline

"""# **Load image and display**"""

# Load original image
def load_image(filepath):
  im = cv2.imread(filepath, 1)
  imrgb= im[:, :, ::-1]
  r, c, t = im.shape
  return imrgb, r, c, t

#display
def display_image(imagepath):
  plt.imshow(imagepath)
  plt.show()

"""# ***Load random number from log file***"""

def log_to_mask(filepath, r, c, t):
  file = open(filepath, 'rb')
  rdnums= file.read(r*c*t)
  mask= []
  for rdnum in rdnums:
    mask.append(rdnum)
  mask= np.asarray(mask)
  mask= mask[0:r*c*t].reshape(r, c, t)
  return mask

"""**Turn random number into image**"""

def num_to_img(nums, r, c, imgname):
  bits = np.unpackbits(np.array(nums[28:len(nums)]).astype(np.uint8)) * 255
  fp = bits[0:r*c].reshape((r, c))
  fp_pil = Image.fromarray(fp, 'L')
  fp_pil.save(imgname+ '.png')

"""# **Encryption: XOR image with the noise mask**"""

def encryption(origin_image, mask, r, c, t):
  encrypted_image = np.zeros((r, c, t), np.uint8)
  for row in range(r):
      for column in range(c):
          for depth in range(t):
              encrypted_image[row, column, depth] = origin_image[row, column, depth] ^ mask[row, column, depth] 
  return encrypted_image

"""**verify**"""

def decryption(image, mask, r, c, t):
  decrypted_image= encryption(image, mask, r, c, t)
  return decrypted_image

def verify(encrypted_image, mask, r, c, t):
  decrypted_image= decryption(encrypted_image, mask, r, c, t)
  display_image(decrypted_image)

"""# **Comparasion: using hamming weighted to input data**"""

def hamming_weighted(num):
  size= int(num*r*c*t/100)
  keynum = random.randint(0, 256, size = r*c*t-size)
  keyadd= np.full(size, 255)
  keynum= np.concatenate((keynum, keyadd))
  keynum= utils.shuffle(keynum)
  keynum= keynum[0:r*c*t].reshape(r, c, t)
  return keynum

"""# **Main Process of Steganography**

**Using log file as the noise mask**
"""

# load imagine
image, r, c, t = load_image('/content/drive/MyDrive/ML/lion.jpeg')
#display_image(image)
# import noise mask
mask= log_to_mask('/content/drive/MyDrive/ML/putty.log', r , c , t)
### test
# num_to_img(mask , r , c , 'mask')
# encryption
encryptedimg = encryption(image , mask , r , c , t)
# display result
display_image(encryptedimg)
### verify
# verify(encryptedimg , mask , r , c , t)

"""**Using hamming weighted 49%, 50%, 51% as the noise mask**"""

ham_list= [49, 50, 51]
for ham in ham_list:
  masknum= hamming_weighted(ham)
  image2, r, c, t= load_image('/content/drive/MyDrive/ML/lion.jpeg')
  encryptedimg2= encryption(image2, masknum, r, c, t)
  display_image(encryptedimg2)